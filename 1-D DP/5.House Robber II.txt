class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if(n==1)
          return nums[0];
        if(n==2)
          return Math.max(nums[0],nums[1]);  
        int[] dp = new int[n];
        int ans1=f(0,n-1,nums);
         Arrays.fill(dp,0);
        int ans2=f(1,n,nums); 
        
        return Math.max(ans1,ans2);
    }
    //------------------SPACE OPTIMIZATION-----------------------
    public int f(int idx, int n, int[] nums)
    {
         int prev1 = nums[idx];
         int prev2 =Math.max(nums[idx], nums[idx+1]);
         for(int i=idx+2;i<n;i++){
            int curr = Math.max(prev2, nums[i]+prev1);
            prev1=prev2;
            prev2=curr;
        }
        return prev2;
    }
    /*
    --------------------TABULATION----------------------
    public int f(int idx, int n, int[] nums, int[] dp)
    {
        dp[idx] = nums[idx];
        dp[idx+1]=Math.max(nums[idx], nums[idx+1]);
        for(int i=idx+2;i<n;i++){
          dp[i] = Math.max(dp[i-1], nums[i]+dp[i-2]);
        }
        return dp[n-1];
    }
   */
/*
----------------------MEMOIZATION-------------------------
    public int f(int idx, int n, int[] arr, int[] dp)
    {
        if(idx>=n)
          return 0;
          if(dp[idx]!=-1)
            return dp[idx];
          int take = f(idx+2,n,arr,dp)+arr[idx];
          int not_take = f(idx+1,n,arr,dp);
          return dp[idx] = Math.max(take,not_take);  
    }*/
    /*
    ----------------RECURSION----------------------------
    public int f(int idx, int n, int[] arr)
    {
        if(idx>=n)
          return 0;
          int take = f(idx+2,n,arr)+arr[idx];
          int not_take = f(idx+1,n,arr);
          return Math.max(take,not_take);  
    }*/
}