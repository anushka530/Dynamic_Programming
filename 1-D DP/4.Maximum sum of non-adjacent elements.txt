Question:
https://www.codingninjas.com/codestudio/problems/maximum-sum-of-non-adjacent-elements_843261?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0


Solution:

import java.util.* ;
import java.io.*; 
import java.util.*;
public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		// Write your code here.
		int idx=0;
		int n = nums.size();
		int[] dp = new int[n];
		Arrays.fill(dp,-1);
		return f(idx,nums,n);
	}


/*	

-------------------RECURSION-----------------------------
public static int f(int idx, ArrayList<Integer> nums, int n)
	{
		if(idx>=n)
		  return 0;
		int take = f(idx+2, nums, n) + nums.get(idx);
		int not_take = f(idx+1, nums,n);
		return Math.max(take,not_take);
	}
*/


/*
--------------------------MEMOIZAZTION-----------------------------
public static int f(int idx, ArrayList<Integer> nums, int n, int[] dp)
	{
		if(idx>=n)
		  return 0;
		if(dp[idx]!=-1)
		  return dp[idx];  
		int take = f(idx+2, nums, n,dp) + nums.get(idx);
		int not_take = f(idx+1, nums,n,dp);
		return dp[idx] = Math.max(take,not_take);
	}
	*/

/*
-------------------------TABULATION-----------------------------------
public static int f(int idx, ArrayList<Integer> nums, int n, int[] dp)
	{
		if(n==1)
		  return nums.get(0);
		dp[0]=nums.get(0);
		dp[1]=Math.max(nums.get(0), nums.get(1));  
		for(int i=2;i<n;i++)
		{
			dp[i] = Math.max(dp[i-2]+nums.get(i), dp[i-1]);
		}
		return dp[n-1];
	}*/

	public static int f(int idx, ArrayList<Integer> nums, int n)
	{
		if(n==1)
		  return nums.get(0);
		int prev1=nums.get(0);
		int prev2=Math.max(nums.get(0), nums.get(1));  
		for(int i=2;i<n;i++)
		{
			int val = Math.max(prev1+nums.get(i), prev2);
			prev1=prev2;
			prev2=val;
		}
		return prev2;
	}
}