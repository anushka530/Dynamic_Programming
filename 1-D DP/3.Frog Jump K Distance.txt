Question:
https://atcoder.jp/contests/dp/tasks/dp_b

Solution:

package introduction;
import java.util.*;
public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
	    int n = sc.nextInt();
	    int k = sc.nextInt();
	    int[] h = new int[n];
	    int[] dp = new int[n];
	    Arrays.fill(dp, -1);
	    for(int i=0;i<n;i++)
	    	 h[i] = sc.nextInt();
	    System.out.print(f(n-1,k,h,dp));
	}
	
// ------------TABULATION-----------------------
	public static int f(int n, int k, int[] h, int[] dp)
	{
		if(n==0)
			return 0;
		dp[0]=0;
		for(int i=1;i<=n;i++)
		{
			for(int j=1;j<=k;j++)
			{
				if(i-j>=0)
				{
					if(dp[i]!=-1)
					  dp[i] = Math.min(dp[i], dp[i-j] + Math.abs(h[i] - h[i-j]));
					else
					 dp[i] = Math.abs(h[i]-h[i-j])+dp[i-j];
				}
			}
		}
		return dp[n];
	}
	/*
	 ------------------MEMOZIATION---------------------
	public static int f(int n, int k, int[] h, int[] dp)
	{
		if(n==0)
			return dp[n] = 0;
		if(dp[n]!=-1)
			return dp[n];
		int ans = Integer.MAX_VALUE;
		for(int i=1;i<=k;i++)
		{
			if(n-i>=0)
			{
				int jump = f(n-i,k,h,dp) + Math.abs(h[n] - h[n-i]);
				ans = Math.min(ans, jump);
			}
		}
		return dp[n]=ans;
		
	}
	*/
	/*
	 ------------RECURSION-----------------------
	public static int f(int n, int k, int[] h)
	{
		if(n==0)
			return 0;
		int ans = Integer.MAX_VALUE;
		for(int i=1;i<=k;i++)
		{
			if(n-i>=0)
			{
				int jump = f(n-i,k,h) + Math.abs(h[n] - h[n-i]);
				ans = Math.min(ans, jump);
			}
		}
		return ans;
	}
	*/
	
}
