Question:
https://www.codingninjas.com/codestudio/problems/frog-jump_3621012?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=1



Solution:

import java.util.* ;
import java.io.*; 
public class Solution {
    public static int frogJump(int n, int heights[]) {

        // Write your code here..
       // return f(n-1,heights); -----> Recursion

       //int[] dp = new int[n];
       //Arrays.fill(dp,-1);
       //return f(n-1,heights,dp); -------> Memoization

       //return f(n-1,heights,dp);  ---------> Tabulation
       return f(n-1, heights); // Space Optimization
    }
// -------------------SPACE OPTIMIZATION-------------------------
    public static int f(int n, int[] h)
    {
       if(n==0)
         return 0; 
       int prev1=0;
       int prev2=Math.abs(h[1]-h[0]);
       int ans = prev2;
       for(int i=2;i<=n;i++)
       {
           int l = prev2 + Math.abs(h[i]-h[i-1]);
           int r = prev1+Math.abs(h[i]-h[i-2]); 
           ans = Math.min(l,r);
           prev1 = prev2;
           prev2 = ans;

       }
       return ans;
    }

/*
-----------------------TABULATION---------------------
    public static int f(int n, int[] h, int[] dp)
    {
        if(n==0)
          return 0;
        dp[0]=0;
        dp[1]=Math.abs(h[0]-h[1]);
        for(int i=2;i<=n;i++)
        {
           int l = dp[i-1] + Math.abs(h[i]-h[i-1]);
           int r = dp[i-2]+Math.abs(h[i]-h[i-2]); 
           dp[i] = Math.min(l,r);
         } 
         return dp[n];
    }

/*
---------------MEMOIZATION-----------------------
    public static int f(int n, int[] h, int[] dp)
    {
        if(dp[n]!=-1)
          return dp[n];
        if(n==0)
          return dp[0]=0;
        int l = f(n-1,h,dp) + Math.abs(h[n]-h[n-1]);
        int r = Integer.MAX_VALUE;
        if(n-2>=0)
          r=f(n-2,h,dp)+Math.abs(h[n]-h[n-2]);
        return dp[n] = Math.min(l,r); 
    }
/* 

-------------RECURSION-----------------
   public static int f(int n, int[] h)
    {
        if(n==0)
          return 0;
        int l = f(n-1,h) + Math.abs(h[n] - h[n-1]);
        int r = Integer.MAX_VALUE;
        if(n-2>=0)
          r = f(n-2,h) + Math.abs(h[n] - h[n-2]);
        return Math.min(l,r);  
           
    }
    */
}